        -:    0:Source:velha.cpp
        -:    1:/**
        -:    2:*"Copyright 2024 <Alexandre>" 
        -:    3:*/
        -:    4:/**
        -:    5: * \file  velha.cpp
        -:    6: */
        -:    7:
        -:    8:#include "velha.hpp"
        -:    9:#include "catch.hpp"
        -:   10:
        -:   11:/** 
        -:   12: * @brief verifica situacao do jogo da velha  
        -:   13: * @author Programador 
        -:   14: * @param  velha descreve o parametro
        -:   15: * 
        -:   16: *  Descrever o que a funcao faz
        -:   17: */ 
        -:   18:
       18:   19:int VerificaVelha(int velha[3][3]) {
       18:   20:    int countX = 0, countO = 0;
       70:   21:    for (int i = 0; i < 3; i++) {
      216:   22:        for (int j = 0; j < 3; j++) {
      162:   23:            if (velha[i][j] == 1)
       70:   24:                countX++;
      162:   25:            if (velha[i][j] == 0)
       38:   26:                countO++;
        -:   27:        }
       54:   28:        if (i == 2) {
       18:   29:            if ((countX > 5) || (countO > 5))
        2:   30:                return -2;
        -:   31:        }
        -:   32:    }
       62:   33:    for (int j = 0; j < 3; j++) {
       48:   34:        if ((velha[0][j] == 1) && (velha[1][j] == 1) && (velha[2][j] == 1)) {
        2:   35:           return 1;
        -:   36:        }
        -:   37:    }
       50:   38:    for (int i = 0; i < 3; i++) {
       38:   39:        if ((velha[i][0] == 1) && (velha[i][1] == 1) && (velha[i][2] == 1)) {
        2:   40:            return 1;
        -:   41:        }
        -:   42:    }
       12:   43:    if ((velha[0][0] == 1) && (velha[1][1] == 1) && (velha[2][2] == 1))
        2:   44:        return 1;
       10:   45:    if ((velha[0][2] == 1) && (velha[1][1] == 1) && (velha[2][0] == 1))
    #####:   46:        return 1;
       34:   47:    for (int j = 0; j < 3; j++) {
       26:   48:        if ((velha[0][j] == 2) && (velha[1][j] == 2) && (velha[2][j] == 2))
        2:   49:            return 2;
        -:   50:    }
       28:   51:    for (int i = 0; i < 3; i++) {
       22:   52:        if ((velha[i][0] == 2) && (velha[i][1] == 2) && (velha[i][2] == 2))
        2:   53:            return 2;
        -:   54:    }
       6*:   55:    if ((velha[0][0] == 2) && (velha[1][1] == 2) && (velha[2][2] == 2))
    #####:   56:        return 2;
        6:   57:    if ((velha[0][2] == 2) && (velha[1][1] == 2) && (velha[2][0] == 2))
        2:   58:        return 2;
       10:   59:    for (int i = 0; i < 3; i++) {
       36:   60:        for (int j = 0; j < 3; j++) {
       28:   61:            if (velha[i][j] == 0)
        2:   62:                return -1;
        -:   63:        }
        8:   64:        if (i == 2)
        2:   65:            return 0;
        -:   66:    }
    #####:   67:    return 15; /*!< retorna zero para teste */
        -:   68:}
